// Xeader Studios
//
// NOTICE OF LICENCE
//
// This source file is subject to the EULA
// that is bundled with this package in the file LICENSE.txt
// It is also available through th world-wide-web at this URL:
// https://xeader.com/LICENCE-CE.txt
//
// @category xeader.itcss
// @package xeader.itcss
//
// @author Antonio Gatta <a.gatta@xeader.com>
// @url https://xeader.com
// @copyright Copyright (c) 2019 Xeader Studios
// @license All right reserved

//
//  MIXINS
//

// Simple truncation mixin to cut off text using an ellipsis after a certain
// width.
//
// .simple-usage {
//   @include truncate();
// }
//
// .detailed-usage {
//   @include truncate(<value>, important);
// }

//
// Vertical Rhythm
//
// This is the minimal amount of code needed to create vertical rhythm in our
// CSS. If you are looking for a robust solution, look at the excellent Typey
// library. @see https://github.com/jptaranto/typey
@function normalize-rhythm($value, $relative-to: $base-font-size, $unit: $base-unit) {
  @if unit($value) != px {
    @error "The normalize vertical-rhythm module only supports px inputs. The typey library is better.";
  }
  @if $unit == rem {
    @return ($value / $base-font-size) * 1rem;
  }
  @else if $unit == em {
    @return ($value / $relative-to) * 1em;
  }
  @else { // $unit == px
    @return $value;
  }
}

@mixin normalize-font-size($value, $relative-to: $base-font-size) {
  @if unit($value) != 'px' {
    @error "normalize-font-size() only supports px inputs. The typey library is better.";
  }
  font-size: normalize-rhythm($value, $relative-to);
}

@mixin normalize-rhythm($property, $values, $relative-to: $base-font-size) {
  $value-list: $values;
  $sep: space;
  @if type-of($values) == 'list' {
    $sep: list-separator($values);
  }
  @else {
    $value-list: append((), $values);
  }

  $normalized-values: ();
  @each $value in $value-list {
    @if unitless($value) and $value != 0 {
      $value: $value * normalize-rhythm($base-line-height, $relative-to);
    }
    $normalized-values: append($normalized-values, $value, $sep);
  }
  #{$property}: $normalized-values;
}

@mixin normalize-margin($values, $relative-to: $base-font-size) {
  @include normalize-rhythm(margin, $values, $relative-to);
}

@mixin normalize-line-height($font-size, $min-line-padding: 2px) {
  $lines: ceil($font-size / $base-line-height);
  // If lines are cramped include some extra leading.
  @if ($lines * $base-line-height - $font-size) < ($min-line-padding * 2) {
    $lines: $lines + 1;
  }
  @include normalize-rhythm(line-height, $lines, $font-size);
}

@mixin truncate($limit: 100%, $important: false) {
  @if ($important == "important") {
    $important: unquote("!important");
  } @else {
    $important: null;
  }

  max-width: $limit $important;
  white-space: nowrap $important;
  overflow: hidden $important;
  text-overflow: ellipsis $important;
}

//
// Full Width
//
$max-full-width: 1600px !default;

@mixin full-width-max {
  margin-left: auto;
  margin-right: auto;
  max-width: rem-calc($max-full-width);
}

//
// First-Last no margin
//
@mixin flnm() {
  > *:first-child {
    margin-top: auto;
  }
  > *:last-child {
    margin-bottom: auto;
  }
}


@mixin no-list{
  &, li{
    margin-top: unset;
    margin-bottom: unset;
    list-style-type: none;
    padding-left: 0;
  }
}

@mixin ellipsis-lines($lines: 2){
  overflow: hidden;
  text-overflow: ellipsis;
  display: -webkit-box;
  -webkit-line-clamp: $lines;
  -webkit-box-orient: vertical;
}

@mixin center-text-ellipsis(){
  span:first-child {
    // The left side CANNOT GROW, it can ONLY SHRINK (and add an ellipsis at the end).
    flex: 0 1 auto ;
    overflow: hidden ;
    text-overflow: ellipsis ;
    white-space: pre ;
  }

  span:last-child {
    // The right side can grow, but NOT SHRINK.
    flex: 1 0 auto;
    overflow: hidden;
    white-space: pre;
  }
}

//
// Make an block scrollable
//
@mixin scrollable($direction: vertical) {
  @if ($direction == vertical) {
    // Make this scrollable when needed
    overflow-x: hidden;
    // We don't want vertical scrolling
    overflow-y: auto;
  } @else {
    // Make this scrollable when needed
    overflow-x: auto;
    // We don't want vertical scrolling
    overflow-y: hidden;
  }
  // For WebKit implementations, provide inertia scrolling
  -webkit-overflow-scrolling: touch;

  // Make an auto-hiding scroller for the 3 people using a IE
  -ms-overflow-style: -ms-autohiding-scrollbar;
  scrollbar-width: none;
  // Remove the default scrollbar for WebKit implementations
  &::-webkit-scrollbar {
    display: none;
  }
}
